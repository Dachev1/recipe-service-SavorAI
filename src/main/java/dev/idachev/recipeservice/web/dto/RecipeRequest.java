package dev.idachev.recipeservice.web.dto;

import dev.idachev.recipeservice.model.DifficultyLevel;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.PositiveOrZero;
import jakarta.validation.constraints.Size;
import java.util.List;

/**
 * Immutable Data Transfer Object for recipe creation and update requests using Java Record.
 * Contains all fields needed to create or update a recipe.
 */
@Schema(description = "Recipe creation and update request data")
public record RecipeRequest(
    // Basic recipe information
    @Schema(description = "Recipe title", example = "Spaghetti Carbonara", requiredMode = Schema.RequiredMode.REQUIRED)
    @NotBlank(message = "Recipe title is required")
    @Size(max = 255, message = "Title must be less than 255 characters")
    String title,

    @Schema(description = "Serving suggestions including garnishes, sides, and pairings", example = "Serve hot with a sprinkle of fresh parsley and a glass of white wine")
    @Size(max = 1000, message = "Serving suggestions must be less than 1000 characters")
    String servingSuggestions,

    @Schema(description = "Step-by-step cooking instructions", example = "1. Boil pasta until al dente\n2. In a separate pan, cook pancetta...", requiredMode = Schema.RequiredMode.REQUIRED)
    @NotBlank(message = "Instructions are required")
    String instructions,

    @Schema(description = "URL to recipe image", example = "https://example.com/images/carbonara.jpg")
    String imageUrl,

    // Recipe ingredients
    @Schema(description = "List of ingredients required for the recipe", example = "[\"200g spaghetti\", \"100g pancetta\", \"2 large eggs\"]", requiredMode = Schema.RequiredMode.REQUIRED)
    @NotEmpty(message = "At least one ingredient is required")
    // Note: For true immutability, ensure an unmodifiable list is passed during record creation
    List<String> ingredients,

    // Recipe metadata
    @Schema(description = "Total preparation and cooking time in minutes", example = "30")
    @PositiveOrZero(message = "Total time cannot be negative")
    Integer totalTimeMinutes,

    @Schema(description = "Recipe difficulty level", example = "MEDIUM") // Removed enumAsRef=true as it's often default/inferred for records
    DifficultyLevel difficulty,

    @Schema(description = "Whether the recipe was generated by AI", example = "false")
    Boolean isAiGenerated,

    // Nutritional information
    @Schema(description = "Nutritional information for the recipe")
    @Valid // Apply validation to the nested record fields
    MacrosDto macros
) {} 