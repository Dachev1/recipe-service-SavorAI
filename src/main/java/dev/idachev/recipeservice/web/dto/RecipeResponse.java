package dev.idachev.recipeservice.web.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import dev.idachev.recipeservice.model.DifficultyLevel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * Immutable Data Transfer Object for recipe responses using Java Record.
 */
@JsonInclude(JsonInclude.Include.NON_NULL) // Keep this for clean JSON output
@Schema(description = "Recipe data with detailed information returned from API")
public record RecipeResponse(
    // Identifiers
    @Schema(description = "Unique identifier of the recipe")
    UUID id,
    
    @Schema(description = "ID of the user who created this recipe")
    UUID createdById,
    
    // Basic information
    @Schema(description = "Recipe title")
    String title,
    
    @Schema(description = "Serving suggestions")
    String servingSuggestions,
    
    @Schema(description = "Cooking instructions")
    String instructions,
    
    @Schema(description = "URL to recipe image")
    String imageUrl,
    
    @Schema(description = "List of ingredients")
    // Note: Ensure an unmodifiable list is passed during record creation for true immutability
    List<String> ingredients,
    
    @Schema(description = "Total preparation and cooking time in minutes")
    Integer totalTimeMinutes,
    
    @Schema(description = "Name of recipe author")
    String authorName,
    
    @Schema(description = "Username of recipe creator")
    String username,
    
    // TODO: Verify type of authorId. Currently String. If User Service returns UUID, change type here and in RecipeService enhancement logic.
    @Schema(description = "ID of recipe author")
    String authorId, // Assuming this is String, if it's UUID, change type
    
    @Schema(description = "Recipe difficulty level")
    DifficultyLevel difficulty,
    
    @Schema(description = "Whether this recipe was generated by AI")
    Boolean isAiGenerated,
    
    // User interaction
    @Schema(description = "Whether current user has favorited this recipe")
    Boolean isFavorite,
    
    @Schema(description = "Number of users who favorited this recipe")
    Long favoriteCount,
    
    @Schema(description = "Number of comments")
    Long commentCount,
    
    @Schema(description = "Number of upvotes")
    Integer upvotes,
    
    @Schema(description = "Number of downvotes")
    Integer downvotes,
    
    @Schema(description = "Current user's vote ('up', 'down', or null)")
    String userVote,
    
    @Schema(description = "Creation timestamp")
    LocalDateTime createdAt,
    
    @Schema(description = "Last update timestamp")
    LocalDateTime updatedAt,
    
    @Schema(description = "Nutritional information")
    MacrosDto macros,
    
    @Schema(description = "Additional fields for frontend compatibility", hidden = true)
    // Note: Ensure an unmodifiable map is passed during record creation for true immutability
    Map<String, Object> additionalFields
) {
    // Optional: Define a compact constructor if you need custom logic/validation during creation
    // public RecipeResponse { ... }

    // Optional: Define custom methods if needed
    // public String getFormattedTitle() { ... }
} 