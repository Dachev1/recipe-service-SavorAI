package dev.idachev.recipeservice.web.dto;

import dev.idachev.recipeservice.model.DifficultyLevel;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

/**
 * Data Transfer Object for recipe responses.
 * Contains all recipe data including metadata and user interaction information.
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Recipe data with detailed information returned from API")
public class RecipeResponse {
    // Identifiers
    @Schema(description = "Unique identifier of the recipe", example = "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11")
    private UUID id;
    
    @Schema(description = "ID of the user who created this recipe", example = "b5eebc99-9c0b-4ef8-bb6d-6bb9bd380a22")
    private UUID createdById;
    
    // Basic recipe information
    @Schema(description = "Recipe title", example = "Spaghetti Carbonara")
    private String title;
    
    @Schema(description = "Serving suggestions for the recipe", example = "Serve with freshly grated Parmesan and black pepper")
    private String servingSuggestions;
    
    @Schema(description = "Step-by-step cooking instructions", example = "1. Boil pasta until al dente\n2. In a separate pan, cook pancetta...")
    private String instructions;
    
    @Schema(description = "URL to recipe image", example = "https://example.com/images/carbonara.jpg")
    private String imageUrl;
    
    @Schema(description = "List of ingredients required for the recipe", example = "[\"200g spaghetti\", \"100g pancetta\", \"2 large eggs\"]")
    private List<String> ingredients;
    
    // Recipe metadata
    @Schema(description = "Total preparation and cooking time in minutes", example = "30")
    private Integer totalTimeMinutes;
    
    @Schema(description = "Name of the recipe author", example = "John Doe")
    private String authorName;
    
    @Schema(description = "Username of the recipe creator", example = "johndoe123")
    private String username;
    
    // Recipe properties
    @Schema(description = "Recipe difficulty level", example = "MEDIUM")
    private DifficultyLevel difficulty;
    
    @Schema(description = "Whether this recipe was generated by AI", example = "false")
    private Boolean isAiGenerated;
    
    // User interaction fields
    @Schema(description = "Whether the current user has favorited this recipe", example = "true")
    private Boolean isFavorite;
    
    @Schema(description = "Number of users who have favorited this recipe", example = "42")
    private Long favoriteCount;
    
    @Schema(description = "Number of comments on this recipe", example = "15")
    private Long commentCount;
    
    @Schema(description = "Number of upvotes for this recipe", example = "28")
    private Integer upvotes;
    
    @Schema(description = "Number of downvotes for this recipe", example = "3")
    private Integer downvotes;
    
    @Schema(description = "Current user's vote on this recipe", example = "UPVOTE")
    private String userVote;
    
    // Timestamps
    @Schema(description = "Creation timestamp")
    private LocalDateTime createdAt;
    
    @Schema(description = "Last update timestamp")
    private LocalDateTime updatedAt;
    
    // Nutritional information
    @Schema(description = "Nutritional information for the recipe")
    private MacrosDto macros;
} 