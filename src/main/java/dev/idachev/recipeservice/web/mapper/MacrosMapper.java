package dev.idachev.recipeservice.web.mapper;

import dev.idachev.recipeservice.model.Macros;
import dev.idachev.recipeservice.web.dto.MacrosDto;
import lombok.experimental.UtilityClass;

/**
 * Mapper for macronutrient transformations.
 * Provides static methods for converting between Macros entities and DTOs.
 * Assumes both Macros entity and MacrosDto use BigDecimal.
 */
@UtilityClass
public class MacrosMapper {

    /**
     * Converts a Macros entity to a MacrosDto using the record constructor.
     */
    public static MacrosDto toDto(Macros macros) {
        if (macros == null) {
            return null;
        }
        // Use the record constructor, pass BigDecimal fields directly
        return new MacrosDto(
                macros.getCalories(),
                macros.getProteinGrams(),
                macros.getCarbsGrams(),
                macros.getFatGrams()
        );
    }

    /**
     * Converts a MacrosDto to a Macros entity using the entity builder.
     */
    public static Macros toEntity(MacrosDto dto) {
        if (dto == null) {
            return null;
        }
        // Use the entity's builder, pass BigDecimal fields directly
        return Macros.builder()
                .calories(dto.calories())
                .proteinGrams(dto.proteinGrams())
                .carbsGrams(dto.carbsGrams())
                .fatGrams(dto.fatGrams())
                // ID is generated by persistence layer, not set from DTO
                .build();
    }

    // Removed updateEntityFromDto - updates should be handled via reconstruction (builder) if needed.

} 